// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.9
// source: src/protos/video_summarize.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

/** VIDEO SUMMARIZE */
export interface VideoSummarizeRequest {
  url: string;
  summarizeId?: string | undefined;
  bypassCache: boolean;
  videoTitle: string;
  unknown1: number;
  language: string;
  /** ab_model_control */
  flags: string;
  unknown2: number;
  unknown3: number;
}

export interface SummarizeThesisObject {
  thesisId: number;
  content: string;
}

export interface SummarizeChapterObject {
  chapterId: number;
  /** chapter title */
  title: string;
  /** video offset */
  offset: number;
  theses: SummarizeThesisObject[];
}

export interface VideoSummarizeResponse {
  chapters: SummarizeChapterObject[];
  /**
   * 0 is FINISHED
   * 1 is GENERATING
   */
  status: number;
  summarizeId: string;
  /** time before new request in ms */
  interval: number;
  summarizeTitle?: string | undefined;
  unknown0?: string | undefined;
}

function createBaseVideoSummarizeRequest(): VideoSummarizeRequest {
  return {
    url: "",
    summarizeId: undefined,
    bypassCache: false,
    videoTitle: "",
    unknown1: 0,
    language: "",
    flags: "",
    unknown2: 0,
    unknown3: 0,
  };
}

export const VideoSummarizeRequest: MessageFns<VideoSummarizeRequest> = {
  encode(message: VideoSummarizeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    if (message.summarizeId !== undefined) {
      writer.uint32(26).string(message.summarizeId);
    }
    if (message.bypassCache !== false) {
      writer.uint32(32).bool(message.bypassCache);
    }
    if (message.videoTitle !== "") {
      writer.uint32(42).string(message.videoTitle);
    }
    if (message.unknown1 !== 0) {
      writer.uint32(48).int32(message.unknown1);
    }
    if (message.language !== "") {
      writer.uint32(58).string(message.language);
    }
    if (message.flags !== "") {
      writer.uint32(66).string(message.flags);
    }
    if (message.unknown2 !== 0) {
      writer.uint32(80).int32(message.unknown2);
    }
    if (message.unknown3 !== 0) {
      writer.uint32(88).int32(message.unknown3);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoSummarizeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoSummarizeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.summarizeId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.bypassCache = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.videoTitle = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.unknown1 = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.language = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.flags = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.unknown2 = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.unknown3 = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VideoSummarizeRequest {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      summarizeId: isSet(object.summarizeId) ? globalThis.String(object.summarizeId) : undefined,
      bypassCache: isSet(object.bypassCache) ? globalThis.Boolean(object.bypassCache) : false,
      videoTitle: isSet(object.videoTitle) ? globalThis.String(object.videoTitle) : "",
      unknown1: isSet(object.unknown1) ? globalThis.Number(object.unknown1) : 0,
      language: isSet(object.language) ? globalThis.String(object.language) : "",
      flags: isSet(object.flags) ? globalThis.String(object.flags) : "",
      unknown2: isSet(object.unknown2) ? globalThis.Number(object.unknown2) : 0,
      unknown3: isSet(object.unknown3) ? globalThis.Number(object.unknown3) : 0,
    };
  },

  toJSON(message: VideoSummarizeRequest): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.summarizeId !== undefined) {
      obj.summarizeId = message.summarizeId;
    }
    if (message.bypassCache !== false) {
      obj.bypassCache = message.bypassCache;
    }
    if (message.videoTitle !== "") {
      obj.videoTitle = message.videoTitle;
    }
    if (message.unknown1 !== 0) {
      obj.unknown1 = Math.round(message.unknown1);
    }
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.flags !== "") {
      obj.flags = message.flags;
    }
    if (message.unknown2 !== 0) {
      obj.unknown2 = Math.round(message.unknown2);
    }
    if (message.unknown3 !== 0) {
      obj.unknown3 = Math.round(message.unknown3);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VideoSummarizeRequest>, I>>(base?: I): VideoSummarizeRequest {
    return VideoSummarizeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VideoSummarizeRequest>, I>>(object: I): VideoSummarizeRequest {
    const message = createBaseVideoSummarizeRequest();
    message.url = object.url ?? "";
    message.summarizeId = object.summarizeId ?? undefined;
    message.bypassCache = object.bypassCache ?? false;
    message.videoTitle = object.videoTitle ?? "";
    message.unknown1 = object.unknown1 ?? 0;
    message.language = object.language ?? "";
    message.flags = object.flags ?? "";
    message.unknown2 = object.unknown2 ?? 0;
    message.unknown3 = object.unknown3 ?? 0;
    return message;
  },
};

function createBaseSummarizeThesisObject(): SummarizeThesisObject {
  return { thesisId: 0, content: "" };
}

export const SummarizeThesisObject: MessageFns<SummarizeThesisObject> = {
  encode(message: SummarizeThesisObject, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.thesisId !== 0) {
      writer.uint32(8).int32(message.thesisId);
    }
    if (message.content !== "") {
      writer.uint32(18).string(message.content);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SummarizeThesisObject {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSummarizeThesisObject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.thesisId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.content = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SummarizeThesisObject {
    return {
      thesisId: isSet(object.thesisId) ? globalThis.Number(object.thesisId) : 0,
      content: isSet(object.content) ? globalThis.String(object.content) : "",
    };
  },

  toJSON(message: SummarizeThesisObject): unknown {
    const obj: any = {};
    if (message.thesisId !== 0) {
      obj.thesisId = Math.round(message.thesisId);
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SummarizeThesisObject>, I>>(base?: I): SummarizeThesisObject {
    return SummarizeThesisObject.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SummarizeThesisObject>, I>>(object: I): SummarizeThesisObject {
    const message = createBaseSummarizeThesisObject();
    message.thesisId = object.thesisId ?? 0;
    message.content = object.content ?? "";
    return message;
  },
};

function createBaseSummarizeChapterObject(): SummarizeChapterObject {
  return { chapterId: 0, title: "", offset: 0, theses: [] };
}

export const SummarizeChapterObject: MessageFns<SummarizeChapterObject> = {
  encode(message: SummarizeChapterObject, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chapterId !== 0) {
      writer.uint32(8).int32(message.chapterId);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.offset !== 0) {
      writer.uint32(25).double(message.offset);
    }
    for (const v of message.theses) {
      SummarizeThesisObject.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SummarizeChapterObject {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSummarizeChapterObject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.chapterId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.offset = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.theses.push(SummarizeThesisObject.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SummarizeChapterObject {
    return {
      chapterId: isSet(object.chapterId) ? globalThis.Number(object.chapterId) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
      theses: globalThis.Array.isArray(object?.theses)
        ? object.theses.map((e: any) => SummarizeThesisObject.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SummarizeChapterObject): unknown {
    const obj: any = {};
    if (message.chapterId !== 0) {
      obj.chapterId = Math.round(message.chapterId);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.offset !== 0) {
      obj.offset = message.offset;
    }
    if (message.theses?.length) {
      obj.theses = message.theses.map((e) => SummarizeThesisObject.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SummarizeChapterObject>, I>>(base?: I): SummarizeChapterObject {
    return SummarizeChapterObject.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SummarizeChapterObject>, I>>(object: I): SummarizeChapterObject {
    const message = createBaseSummarizeChapterObject();
    message.chapterId = object.chapterId ?? 0;
    message.title = object.title ?? "";
    message.offset = object.offset ?? 0;
    message.theses = object.theses?.map((e) => SummarizeThesisObject.fromPartial(e)) || [];
    return message;
  },
};

function createBaseVideoSummarizeResponse(): VideoSummarizeResponse {
  return { chapters: [], status: 0, summarizeId: "", interval: 0, summarizeTitle: undefined, unknown0: undefined };
}

export const VideoSummarizeResponse: MessageFns<VideoSummarizeResponse> = {
  encode(message: VideoSummarizeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.chapters) {
      SummarizeChapterObject.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.summarizeId !== "") {
      writer.uint32(34).string(message.summarizeId);
    }
    if (message.interval !== 0) {
      writer.uint32(40).int32(message.interval);
    }
    if (message.summarizeTitle !== undefined) {
      writer.uint32(66).string(message.summarizeTitle);
    }
    if (message.unknown0 !== undefined) {
      writer.uint32(82).string(message.unknown0);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoSummarizeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoSummarizeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chapters.push(SummarizeChapterObject.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.summarizeId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.interval = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.summarizeTitle = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.unknown0 = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VideoSummarizeResponse {
    return {
      chapters: globalThis.Array.isArray(object?.chapters)
        ? object.chapters.map((e: any) => SummarizeChapterObject.fromJSON(e))
        : [],
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
      summarizeId: isSet(object.summarizeId) ? globalThis.String(object.summarizeId) : "",
      interval: isSet(object.interval) ? globalThis.Number(object.interval) : 0,
      summarizeTitle: isSet(object.summarizeTitle) ? globalThis.String(object.summarizeTitle) : undefined,
      unknown0: isSet(object.unknown0) ? globalThis.String(object.unknown0) : undefined,
    };
  },

  toJSON(message: VideoSummarizeResponse): unknown {
    const obj: any = {};
    if (message.chapters?.length) {
      obj.chapters = message.chapters.map((e) => SummarizeChapterObject.toJSON(e));
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    if (message.summarizeId !== "") {
      obj.summarizeId = message.summarizeId;
    }
    if (message.interval !== 0) {
      obj.interval = Math.round(message.interval);
    }
    if (message.summarizeTitle !== undefined) {
      obj.summarizeTitle = message.summarizeTitle;
    }
    if (message.unknown0 !== undefined) {
      obj.unknown0 = message.unknown0;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VideoSummarizeResponse>, I>>(base?: I): VideoSummarizeResponse {
    return VideoSummarizeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VideoSummarizeResponse>, I>>(object: I): VideoSummarizeResponse {
    const message = createBaseVideoSummarizeResponse();
    message.chapters = object.chapters?.map((e) => SummarizeChapterObject.fromPartial(e)) || [];
    message.status = object.status ?? 0;
    message.summarizeId = object.summarizeId ?? "";
    message.interval = object.interval ?? 0;
    message.summarizeTitle = object.summarizeTitle ?? undefined;
    message.unknown0 = object.unknown0 ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
